name: Build AMI and Include Artifact

on: [ push ]

env:
  HOST: "localhost"
  MYSQLUSER: "root"
  PASSWORD: ${{ secrets.SQL_PASSWORD }}

jobs:
  build_ami:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Starting Node JS message
      run: echo "Setting up Node JS"

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Finishing Node JS set up message
      run: echo "Node JS installation done"

    - name: Starting installation for mysql-server
      run: echo "mysql-server installation done"
        
    - name: configuremysql
      run: |
        sudo apt-get update
        sudo systemctl start mysql
        sudo systemctl status mysql
        mysql -u root -p"${PASSWORD}" -e "CREATE DATABASE Assignments_Demo_DB;"

    - name: Starting dependency installation
      run: echo "Installing Dependencies"

    - name: Install dependencies
      run: npm install

    - name: Dependency installation completed
      run: echo "Dependencies Installed"

    - name: Running test files
      run: echo "Starting test"

    - name: run tests
      run: npm test

    - name: Zip the artifact
      run: |
        zip -r webapp.zip ./
        ls -lrth

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: app-artifact
        path: webapp.zip

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AMI_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AMI_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AMI_AWS_REGION }}

    - name: Setup `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: 'latest'

    - name: Packer Init
      run: packer init packer/aws-ami.pkr.hcl

    - name: Packer Build
      run: |
        packer build -var-file=packer/packer-config.hcl packer/aws-ami.pkr.hcl
      
    - name: Set up AWS CLI for dev
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ secrets.AMI_AWS_REGION }}

    - name: Get AMI ID
      id: get_ami_id
      run: |
        tag_name="csye6225_$(date -u +\%Y_\%m_\%d_\%H_\%M)"

        echo "The tag name: $tag_name"

        ami_id=$(aws ec2 describe-images --filters "Name=tag:Name,Values=$tag_name" --query 'Images[0].ImageId' --output text)
    
        if [ -z "$ami_id" ] || [ "$ami_id" = "None" ]; then
          echo "Error: No valid AMI ID found for tag '$tag_name'. Exiting."
          exit 1
        fi

        echo "Found AMI_ID: $ami_id"
        echo "AMI_ID=$ami_id" > ami_id.txt

    - name: Update Launch Template with new AMI ID
      run: |
        launch_template_id=$(aws ec2 describe-launch-templates --launch-template-name csye6225-dev-launch-template --region ${{ secrets.AMI_AWS_REGION }} --query 'LaunchTemplates[0].LaunchTemplateId' --output json)

        if [ -z "$launch_template_id" ]; then
          echo "Error: Launch template ID not found or empty. Exiting."
          exit 1
        fi

        ami_id=$(cat ami_id.txt)

        echo "Launch Template ID: $launch_template_id"

        launch_template_id=$(echo "$launch_template_id" | tr -d '"')

        echo "Launch Template ID without quotes: $launch_template_id"

        launch_template_data=$(aws ec2 describe-launch-templates --launch-template-ids "$launch_template_id" --query 'LaunchTemplates[0].LaunchTemplateData' --output json )

        echo "Fetched launch template data"

        modified_launch_template_data=$(echo $launch_template_data | jq --arg ami_id $ami_id '.ImageId = $ami_id')

        echo "Modified the launch template data and going to update the launch template version"

        aws ec2 create-launch-template-version \
          --launch-template-id $launch_template_id \
          --source-version 1 \
          --launch-template-data "$modified_launch_template_data"


    - name: Update Auto Scaling Group with new Launch Template
      run: |
        asg_name=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[0].AutoScalingGroupName" --output text)

        launch_template_id=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?AutoScalingGroupName=='$asg_name'].LaunchTemplate.LaunchTemplateId" --output text)

        aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg_name --launch-template LaunchTemplateId=$launch_template_id,Version=$launch_template_version

    - name: Trigger instance refresh
      run: |
        asg_name=$(cat asg_name.txt)
        aws autoscaling start-instance-refresh --auto-scaling-group-name $asg_name --strategy Rolling


  
